# assumes install_command is set
---
- name: Translate target names
  ansible.builtin.set_fact:
    target_names: "{{ target_names + [target_name_map[item]] }}"
  loop: "{{ targets }}"
  vars:
    target_names: []

- name: Add infrastructure if logs is in targets
  ansible.builtin.set_fact:
    target_names: "{{ target_names + [target_name_map['infrastructure']] }}"
  when: "target_name_map['logs'] in target_names and target_name_map['infrastructure'] is not in target_names"

- name: Attach install targets
  ansible.builtin.set_fact:
    install_command: "{{ install_command }} -n {{ target_names | join(',') }}"

- name: Prepare environment variables for newrelic-cli execution
  ansible.builtin.set_fact:
    env_vars: ""

- name: Add NEW_RELIC_CLI_SKIP_CORE environment variable
  ansible.builtin.set_fact:
    env_vars: "NEW_RELIC_CLI_SKIP_CORE=1"
  when: target_name_map['logs'] is not in target_names and target_name_map['infrastructure'] is not in target_names

- name: Read NEW_RELIC_API_KEY environment variable
  ansible.builtin.shell: echo $NEW_RELIC_API_KEY
  register: api_key

- name: Set NEW_RELIC_API_KEY
  ansible.builtin.set_fact:
    new_relic_api_key: "{{ api_key.stdout }}"
  no_log: true

- name: Fail if NEW_RELIC_API_KEY is not set
  ansible.builtin.fail:
    msg: NEW_RELIC_API_KEY is not set
  when: new_relic_api_key == ''

- name: Add NEW_RELIC_API_KEY environment variable
  ansible.builtin.set_fact:
    env_vars: "{{ env_vars }} NEW_RELIC_API_KEY={{ new_relic_api_key }}"

- name: Read NEW_RELIC_ACCOUNT_ID environment variable
  ansible.builtin.shell: echo $NEW_RELIC_ACCOUNT_ID
  register: account_id

- name: Set NEW_RELIC_ACCOUNT_ID
  ansible.builtin.set_fact:
    new_relic_account_id: "{{ account_id.stdout }}"

- name: Fail if NEW_RELIC_ACCOUNT_ID is not set
  ansible.builtin.fail:
    msg: NEW_RELIC_ACCOUNT_ID is not set
  when: new_relic_account_id == ''

- name: Add NEW_RELIC_ACCOUNT_ID environment variable
  ansible.builtin.set_fact:
    env_vars: "{{ env_vars }} NEW_RELIC_ACCOUNT_ID={{ new_relic_account_id }}"

- name: Read NEW_RELIC_REGION environment variable
  ansible.builtin.shell: echo $NEW_RELIC_REGION
  register: region

- name: Set NEW_RELIC_REGION
  ansible.builtin.set_fact:
    new_relic_region: "{{ region.stdout }}"

- name: Default NEW_RELIC_REGION if none specified
  ansible.builtin.set_fact:
    new_relic_region: "{{ new_relic_region | default('US', True) | upper }}"

- name: Add NEW_RELIC_REGION environment variable
  ansible.builtin.set_fact:
    env_vars: "{{ env_vars }} NEW_RELIC_REGION={{ new_relic_region }}"

- name: Get NEW_RELIC_APPLICATION_NAME environment variable
  ansible.builtin.command: echo $NEW_RELIC_APPLICATION_NAME
  register: new_relic_application_name

- name: Add NEW_RELIC_APPLICATION_NAME environment variable
  ansible.builtin.set_fact:
    env_vars: "{{ env_vars }} NEW_RELIC_APPLICATION_NAME={{ new_relic_application_name.stdout }}"
  when: new_relic_application_name.stdout != ''

- name: Attach environment variables
  ansible.builtin.set_fact:
    install_command: "{{ env_vars }} {{ install_command }}"

- name: Attach optional verbosity
  when: verbosity is defined
  ansible.builtin.set_fact:
    install_command: "{{ install_command }} --{{ verbosity }}"

- name: Build default CLI tags
  ansible.builtin.set_fact:
    cli_tags:
      nr_deployed_by: ansible-install

- name: Add optional CLI tags
  when: tags is defined
  ansible.builtin.set_fact:
    cli_tags: "{{ cli_tags | combine(tags) }}"

- name: Attach tags
  ansible.builtin.set_fact:
    install_command: "{{ install_command }} --tag {{ cli_tags.keys() | zip(cli_tags.values()) | map('join', ':') | join(',') }} "

- name: Add sudo
  ansible.builtin.set_fact:
    install_command: "sudo {{ install_command }}"

- name: Create install command report
  ansible.builtin.set_fact:
    install_command_report: r"{{ install_command | regex_replace('(?<=NEW_RELIC_API_KEY=)[^\s]*', '<hidden>') }}"

- name: Report install command
  ansible.builtin.debug:
    msg: "{{ install_command_report }}"
